# Application
log_format: "json"
event_store:
  type: "postgres"
  # connection_string: "" <== Should be injected through the env variable `UNICORE__EVENT_STORE__CONNECTION_STRING`
url: "http://10.48.72.1:3033"
# base_path: "unicore" <== Runs all endpoints with a base path such as `https://ssi-agent.example.org/unicore`
# cors_enabled: false <== Only applicable for browser-based wallets that require CORS
external_server_response_timeout_ms: 500

did_methods:
  did_jwk:
    enabled: true
    preferred: true
  did_key:
    enabled: true
  did_iota_rms:
    enabled: true
  did_web:
    enabled: true

domain_linkage_enabled: false

signing_algorithms_supported:
  es256:
    enabled: true
    preferred: true

# TODO: required to be stated explicitly?
vp_formats:
  jwt_vc_json:
    enabled: true
  jwt_vp_json:
    enabled: true

# agent_event_publisher_http
# Configure here to which events will be dispatched to a specific `target_url`. In the example below, the
# `EventPublisherHttp` will listen for the `SIOPv2AuthorizationResponseVerified` event which is part of the `connection`
# aggregate. The events will be dispatched to the `https://my-domain.example.org/event-subscriber` endpoint.
event_publishers:
  http:
    enabled: false
    target_url: "https://my-domain.example.org/event-subscriber"
    events:
      server_config: []
      credential: [UnsignedCredentialCreated, CredentialSigned]

# These display parameters are interpreted by identity wallets.
display:
  # This value will also be used in the SIOPv2/OID4VP `client_metadata`'s `client_name` property.
  - name: UniCore
    locale: en
    logo:
      # This value will also be used in the SIOPv2/OID4VP `client_metadata`'s `logo_uri` property.
      uri: "https://www.impierce.com/external/impierce-icon.png"
      alt_text: UniCore Logo

credential_configurations:
  - credential_configuration_id: w3c_vc_credential
    format: jwt_vc_json
    credential_definition:
      type:
        - VerifiableCredential
    display:
      - name: Verifiable Credential
        locale: en
        logo:
          url: https://www.impierce.com/external/impierce-logo.png
          alt_text: UniCore Logo

# Key configuration (temporary)
secret_manager:
  # Set this to `true` in order to generate a new stronghold file if it does not exist yet.
  generate_stronghold: true
  # stronghold_path: "/tmp/local.stronghold"
  # stronghold_password: "" <== Should be injected through the env variable `UNICORE__SECRET_MANAGER__STRONGHOLD_PASSWORD`
  # stronghold_password_file: ""
  # issuer_eddsa_key_id: "ed25519-0"
  # issuer_es256_key_id: "es256-0"
  # issuer_did: "did:iota:rms:0x0000000000000000000000000000000000000000000000000000000000000000"
  # issuer_fragment: "key-0"
