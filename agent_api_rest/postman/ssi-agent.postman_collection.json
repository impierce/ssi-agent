{
	"info": {
		"_postman_id": "53b46e18-de7f-4973-8304-8238844a71ce",
		"name": "ssi-agent",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24972330"
	},
	"item": [
		{
			"name": "Issuance",
			"item": [
				{
					"name": "credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get(\"LOCATION\");",
									"",
									"if(location){",
									"    pm.collectionVariables.set(\"CREDENTIAL_LOCATION\",location)",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subjectId\":\"{{SUBJECT_ID}}\",\n    \"credential\": {\n        \"credentialSubject\": {\n            \"type\":[\n                \"AchievementSubject\"\n            ],\n            \"achievement\":{\n                \"id\":\"https://demo.edubadges.nl/public/assertions/6pEB--n-SwiZPtWXMCB2jQ\",\n                \"name\":\"Edubadge account complete\",\n                \"type\":[\n                    \"Achievement\"\n                ],\n                \"image\":{\n                    \"id\":\"https://api-demo.edubadges.nl/media/uploads/badges/issuer_badgeclass_548517aa-cbab-4a7b-a971-55cdcce0e2a5.png\"\n                },\n                \"criteria\":{\n                    \"narrative\":\"To qualify for this edubadge:\\r\\n\\r\\n*  you successfully created an eduID,\\r\\n* you successfully linked your institution to your eduID,\\r\\n*  you can store and manage them safely in your backpack.\"\n                },\n                \"description\":\"### Welcome to edubadges. Let your life long learning begin! ###\\r\\n\\r\\nYou are now ready to collect all your edubadges in your backpack. In your backpack you can store and manage them safely.\\r\\n\\r\\nShare them anytime you like and with whom you like.\\r\\n\\r\\nEdubadges are visual representations of your knowledge, skills and competences.\"\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://{{HOST}}/v1/credentials"
					},
					"response": []
				},
				{
					"name": "credentials",
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://{{HOST}}{{CREDENTIAL_LOCATION}}"
					},
					"response": []
				},
				{
					"name": "offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const credential_offer = responseBody;",
									"",
									"const decodedString = decodeURIComponent(credential_offer);",
									"",
									"// Split the string on the first '=' character and take the second item",
									"const [, secondItem] = decodedString.split('=', 2);",
									"",
									"// Remove the last character from secondItem",
									"const secondItemWithoutLastChar = secondItem.slice(0, -1);",
									"",
									"const { grants } = JSON.parse(secondItemWithoutLastChar);",
									"",
									"const pre_authorized_code = grants['urn:ietf:params:oauth:grant-type:pre-authorized_code']['pre-authorized_code'];",
									"",
									"if(pre_authorized_code){",
									"    pm.collectionVariables.set(\"PRE_AUTHORIZED_CODE\",pre_authorized_code)",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subjectId\": \"{{SUBJECT_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://{{HOST}}/v1/offers"
					},
					"response": []
				}
			]
		},
		{
			"name": "oid4vci",
			"item": [
				{
					"name": "oauth-authorization-server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const issuer = jsonData?.issuer;",
									"const tokenEndpoint = jsonData?.token_endpoint;",
									"",
									"if(issuer){",
									"    pm.collectionVariables.set(\"ISSUER\",issuer)",
									"}",
									"",
									"if(tokenEndpoint){",
									"    pm.collectionVariables.set(\"TOKEN_ENDPOINT\",tokenEndpoint)",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://{{HOST}}/.well-known/oauth-authorization-server"
					},
					"response": []
				},
				{
					"name": "openid-credential-issuer",
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://{{HOST}}/.well-known/openid-credential-issuer"
					},
					"response": []
				},
				{
					"name": "token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const accessToken = jsonData?.access_token;",
									"",
									"if(accessToken){",
									"    pm.collectionVariables.set(\"ACCESS_TOKEN\",accessToken)",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:pre-authorized_code",
									"type": "text"
								},
								{
									"key": "pre-authorized_code",
									"value": "{{PRE_AUTHORIZED_CODE}}",
									"type": "text"
								}
							]
						},
						"url": "http://{{HOST}}/auth/token"
					},
					"response": []
				},
				{
					"name": "credential",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"format\": \"jwt_vc_json\",\n    \"credential_definition\": {\n        \"type\": [\n            \"VerifiableCredential\",\n            \"OpenBadgeCredential\"\n        ]\n    },\n    \"proof\": {\n        \"proof_type\": \"jwt\",\n        \"jwt\": \"eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVkRFNBIiwia2lkIjoiZGlkOmtleTp6Nk1raWlleW9MTVNWc0pBWnY3SmplNXdXU2tERXltVWdreUY4a2JjcmpacFgzcWQjejZNa2lpZXlvTE1TVnNKQVp2N0pqZTV3V1NrREV5bVVna3lGOGtiY3JqWnBYM3FkIn0.eyJpc3MiOiJkaWQ6a2V5Ono2TWtpaWV5b0xNU1ZzSkFadjdKamU1d1dTa0RFeW1VZ2t5RjhrYmNyalpwWDNxZCIsImF1ZCI6Imh0dHBzOi8vZXhhbXBsZS5jb20vIiwiZXhwIjo5OTk5OTk5OTk5LCJpYXQiOjE1NzEzMjQ4MDAsIm5vbmNlIjoiN2UwM2FkM2Y3NmNiMzMzOGMzYTU2NDJmZTc2MzQ0NzZhYTNhZDkzZmExZDU4NDAxMWJhMjE1MGQ5ZGE0NzEzMyJ9.bDxmEWTGwKJJC8J5N16JHAR2ZBYtgWlhM_o_voJdXLnw_ScZMwGjZwNH6aQWKlgIaFWKonF88KNRFX2UAOAuBQ\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://{{HOST}}/openid4vci/credential"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "192.168.1.127:3033",
			"type": "string"
		},
		{
			"key": "PRE_AUTHORIZED_CODE",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "SUBJECT_ID",
			"value": "001",
			"type": "string"
		},
		{
			"key": "ISSUER",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "TOKEN_ENDPOINT",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "ACCESS_TOKEN",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "CREDENTIAL_LOCATION",
			"value": "INITIAL_VALUE",
			"type": "string"
		}
	]
}