{
	"info": {
		"_postman_id": "3b1e6396-3bf7-43aa-bc3b-21056fb21dfa",
		"name": "ssi-agent",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24972330"
	},
	"item": [
		{
			"name": "Issuance",
			"item": [
				{
					"name": "openbadgesv3_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get(\"LOCATION\");",
									"",
									"if(location){",
									"    pm.collectionVariables.set(\"CREDENTIAL_LOCATION\",location)",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offerId\":\"{{OFFER_ID}}\",\n    \"credentialConfigurationId\": \"openbadge_credential\",\n    \"credential\": {\n        \"credentialSubject\": {\n            \"type\": [ \"AchievementSubject\" ],\n            \"achievement\": {\n                \"id\": \"https://example.com/achievements/21st-century-skills/teamwork\",\n                \"type\": \"Achievement\",\n                \"criteria\": {\n                    \"narrative\": \"Team members are nominated for this badge by their peers and recognized upon review by Example Corp management.\"\n                },\n                \"description\": \"This badge recognizes the development of the capacity to collaborate within a group environment.\",\n                \"name\": \"Teamwork\"\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "w3c_vc_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get(\"LOCATION\");",
									"",
									"if(location){",
									"    pm.collectionVariables.set(\"CREDENTIAL_LOCATION\",location)",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offerId\":\"{{OFFER_ID}}\",\n    \"credentialConfigurationId\": \"w3c_vc_credential\",\n    \"credential\": {\n        \"credentialSubject\": {\n            \"first_name\": \"Ferris\",\n            \"last_name\": \"Crabman\",\n            \"dob\": \"1982-01-01\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Thuiswinkel Waarborg Credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get(\"LOCATION\");",
									"",
									"if(location){",
									"    pm.collectionVariables.set(\"CREDENTIAL_LOCATION\",location)",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offerId\":\"{{OFFER_ID}}\",\n    \"credentialConfigurationId\": \"w3c_vc_credential\",\n    \"credential\": {\n        \"credentialSubject\": {\n            \"id\": \"https://ecommerce.impierce.com/\",\n            \"image\": \"https://www.thuiswinkel.org/Images/logo-thuiswinkel_waarborg.svg\",\n            \"name\": \"VirtualVendors\",\n            \"certificaat\": {\n                \"type\": \"ThuiswinkelWaarborg\",\n                \"certificeringsDatum\": \"2024-06-26\",\n                \"geldigheidsPeriode\": \"1 jaar\",\n                \"garanties\": [\n                    \"Het bedrijf is echt en bereikbaar.\",\n                    \"Voldoet aan de Thuiswinkel Algemene Voorwaarden.\",\n                    \"14 dagen bedenktijd.\",\n                    \"Veilige betaalmethoden.\",\n                    \"Duidelijke product/servicebeschrijvingen.\",\n                    \"Transparant bestelproces.\",\n                    \"Duidelijke prijzen.\",\n                    \"Veilige betaalomgeving.\",\n                    \"Veilige omgang met persoonlijke gegevens.\",\n                    \"Effectieve klachtenafhandeling en onafhankelijke geschillenbemiddeling.\"\n                ]\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "credentials",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}{{CREDENTIAL_LOCATION}}",
							"host": [
								"{{HOST}}{{CREDENTIAL_LOCATION}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "all_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const credential_offer = responseBody;",
									"",
									"const decodedString = decodeURIComponent(credential_offer);",
									"",
									"// Split the string on the first '=' character and take the second item",
									"const [, secondItem] = decodedString.split('=', 2);",
									"",
									"var jsonObject = JSON.parse(secondItem);",
									"const pre_authorized_code = jsonObject.grants['urn:ietf:params:oauth:grant-type:pre-authorized_code']['pre-authorized_code'];",
									"",
									"if(pre_authorized_code){",
									"    pm.collectionVariables.set(\"PRE_AUTHORIZED_CODE\",pre_authorized_code)",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offerId\": \"{{OFFER_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/offers",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "all_offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/offers",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "offers_send",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offerId\": \"{{OFFER_ID}}\",\n    \"targetUrl\": \"{{HOST}}/openid4vci/offers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/offers/send",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"offers",
								"send"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "oid4vci",
			"item": [
				{
					"name": "oauth-authorization-server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const issuer = jsonData?.issuer;",
									"const tokenEndpoint = jsonData?.token_endpoint;",
									"",
									"if(issuer){",
									"    pm.collectionVariables.set(\"ISSUER\",issuer)",
									"}",
									"",
									"if(tokenEndpoint){",
									"    pm.collectionVariables.set(\"TOKEN_ENDPOINT\",tokenEndpoint)",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/.well-known/oauth-authorization-server",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"oauth-authorization-server"
							]
						}
					},
					"response": []
				},
				{
					"name": "openid-credential-issuer",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/.well-known/openid-credential-issuer",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"openid-credential-issuer"
							]
						}
					},
					"response": []
				},
				{
					"name": "token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const accessToken = jsonData?.access_token;",
									"",
									"if(accessToken){",
									"    pm.collectionVariables.set(\"ACCESS_TOKEN\",accessToken)",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:pre-authorized_code",
									"type": "text"
								},
								{
									"key": "pre-authorized_code",
									"value": "{{PRE_AUTHORIZED_CODE}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/auth/token",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "credential",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"format\": \"jwt_vc_json\",\n    \"credential_definition\": {\n        \"type\": [\n            \"VerifiableCredential\",\n            \"OpenBadgeCredential\"\n        ]\n    },\n    \"proof\": {\n        \"proof_type\": \"jwt\",\n        \"jwt\": \"eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVkRFNBIiwia2lkIjoiZGlkOmtleTp6Nk1rdWlSS3ExZktyekFYZVNOaUd3cnBKUFB1Z1k4QXhKWUE1Y3BDdlpDWUJEN0IjejZNa3VpUktxMWZLcnpBWGVTTmlHd3JwSlBQdWdZOEF4SllBNWNwQ3ZaQ1lCRDdCIn0.eyJpc3MiOiJkaWQ6a2V5Ono2TWt1aVJLcTFmS3J6QVhlU05pR3dycEpQUHVnWThBeEpZQTVjcEN2WkNZQkQ3QiIsImF1ZCI6Imh0dHA6Ly8xOTIuMTY4LjEuMTI3OjMwMzMvIiwiZXhwIjo5OTk5OTk5OTk5LCJpYXQiOjE1NzEzMjQ4MDAsIm5vbmNlIjoidW5zYWZlX2Nfbm9uY2UifQ.wR2e4VUnVjG6IK9cntcqvc_8KEJQUd3SEjsPZwDYDlYqijZ4ZaQLxyHtzNmLkIS3FpChLrZrcvIUJrZxrWcKAg\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/openid4vci/credential",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"openid4vci",
								"credential"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verification",
			"item": [
				{
					"name": "siopv2_authorization_requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get(\"LOCATION\");",
									"",
									"if(location){",
									"    pm.collectionVariables.set(\"AUTHORIZATION_REQUEST_LOCATION\",location)",
									"}",
									"",
									"const authorization_request = responseBody;",
									"",
									"const decodedString = decodeURIComponent(authorization_request);",
									"",
									"// Regular expression to match the value of request_uri",
									"const regex = /request_uri=([^&]+)/;",
									"",
									"// Executing the regular expression on the input string",
									"const match = regex.exec(decodedString);",
									"",
									"// Extracting the value of request_uri",
									"const requestUri = match ? decodeURIComponent(match[1]) : null;",
									"",
									"pm.collectionVariables.set(\"REQUEST_URI\",requestUri)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nonce\": \"this is a nonce\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/authorization_requests",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"authorization_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "oid4vp_authorization_requests_with_presentation_definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get(\"LOCATION\");",
									"",
									"if(location){",
									"    pm.collectionVariables.set(\"AUTHORIZATION_REQUEST_LOCATION\",location)",
									"}",
									"",
									"const authorization_request = responseBody;",
									"",
									"const decodedString = decodeURIComponent(authorization_request);",
									"",
									"// Regular expression to match the value of request_uri",
									"const regex = /request_uri=([^&]+)/;",
									"",
									"// Executing the regular expression on the input string",
									"const match = regex.exec(decodedString);",
									"",
									"// Extracting the value of request_uri",
									"const requestUri = match ? decodeURIComponent(match[1]) : null;",
									"",
									"pm.collectionVariables.set(\"REQUEST_URI\",requestUri)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nonce\": \"this is a nonce\",\n    \"presentation_definition\": {\n        \"id\":\"Verifiable Presentation request for sign-on\",\n        \"input_descriptors\":[\n            {\n                \"id\":\"Request for Verifiable Credential\",\n                \"constraints\":{\n                    \"fields\":[\n                        {\n                            \"path\":[\n                                \"$.vc.type\"\n                            ],\n                            \"filter\":{\n                                \"type\":\"array\",\n                                \"contains\":{\n                                    \"const\":\"VerifiableCredential\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/authorization_requests",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"authorization_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "oid4vp_authorization_requests_with_presentation_definition_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get(\"LOCATION\");",
									"",
									"if(location){",
									"    pm.collectionVariables.set(\"AUTHORIZATION_REQUEST_LOCATION\",location)",
									"}",
									"",
									"const authorization_request = responseBody;",
									"",
									"const decodedString = decodeURIComponent(authorization_request);",
									"",
									"// Regular expression to match the value of request_uri",
									"const regex = /request_uri=([^&]+)/;",
									"",
									"// Executing the regular expression on the input string",
									"const match = regex.exec(decodedString);",
									"",
									"// Extracting the value of request_uri",
									"const requestUri = match ? decodeURIComponent(match[1]) : null;",
									"",
									"pm.collectionVariables.set(\"REQUEST_URI\",requestUri)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nonce\": \"this is a nonce\",\n    \"presentation_definition_id\": \"presentation_definition\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/authorization_requests",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"authorization_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "authorization_requests",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}{{AUTHORIZATION_REQUEST_LOCATION}}",
							"host": [
								"{{HOST}}{{AUTHORIZATION_REQUEST_LOCATION}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "siopv2",
			"item": [
				{
					"name": "request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{REQUEST_URI}}",
							"host": [
								"{{REQUEST_URI}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": ".well-known",
			"item": [
				{
					"name": "did:web",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/.well-known/did.json",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"did.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "did-configuration",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/.well-known/did-configuration.json",
							"host": [
								"{{HOST}}"
							],
							"path": [
								".well-known",
								"did-configuration.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Holder",
			"item": [
				{
					"name": "offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData && typeof jsonData === 'object') {",
									"    const receivedOfferId = Object.keys(jsonData)[0];",
									"",
									"    if (receivedOfferId) {",
									"        pm.collectionVariables.set(\"RECEIVED_OFFER_ID\", receivedOfferId);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/holder/offers",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"holder",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "offers_accept",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/holder/offers/{{RECEIVED_OFFER_ID}}/accept",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"holder",
								"offers",
								"{{RECEIVED_OFFER_ID}}",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "offers_reject",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/holder/offers/{{RECEIVED_OFFER_ID}}/reject",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"holder",
								"offers",
								"{{RECEIVED_OFFER_ID}}",
								"reject"
							]
						}
					},
					"response": []
				},
				{
					"name": "credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData && typeof jsonData === 'object') {",
									"    const holderCredentialId = Object.keys(jsonData)[0];",
									"",
									"    if (holderCredentialId) {",
									"        pm.collectionVariables.set(\"HOLDER_CREDENTIAL_ID\", holderCredentialId);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/holder/credentials",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"holder",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "presentations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"if (jsonData && typeof jsonData === 'object') {",
									"    const presentationId = Object.keys(jsonData)[0];",
									"",
									"    if (presentationId) {",
									"        pm.collectionVariables.set(\"PRESENTATION_ID\", presentationId);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/holder/presentations",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"holder",
								"presentations"
							]
						}
					},
					"response": []
				},
				{
					"name": "presentations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credentialIds\": [\"{{HOLDER_CREDENTIAL_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/holder/presentations",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"holder",
								"presentations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Identity",
			"item": [
				{
					"name": "services/linked-vp",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"presentationIds\": [\"{{PRESENTATION_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/v0/services/linked-vp",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"services",
								"linked-vp"
							]
						}
					},
					"response": []
				},
				{
					"name": "services",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/v0/services",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"v0",
								"services"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PRE_AUTHORIZED_CODE",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "OFFER_ID",
			"value": "001",
			"type": "string"
		},
		{
			"key": "ISSUER",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "TOKEN_ENDPOINT",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "ACCESS_TOKEN",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "CREDENTIAL_LOCATION",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "AUTHORIZATION_REQUEST_LOCATION",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "REQUEST_URI",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "RECEIVED_OFFER_ID",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "HOLDER_CREDENTIAL_ID",
			"value": "INITIAL_VALUE",
			"type": "string"
		},
		{
			"key": "PRESENTATION_ID",
			"value": "INITIAL_VALUE",
			"type": "string"
		}
	]
}