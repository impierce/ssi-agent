openapi: 3.1.0
info:
  title: UniCore HTTP API
  description: |
    ![Banner](https://images.placeholders.dev/?width=1280&height=720)

    Full HTTP API reference for the UniCore SSI Agent.

    ## Overview

    ### Management endpoints

    ### Standardized endpoints

    Some endpoints that UniCore offers follow a specification (such as the [OpenID4VC](https://openid.net/sg/openid4vc/specifications) protocol family). These endpoints have the **`(standardized)`** tag.

    ### Public endpoints

    Some endpoints should always be publicly accessible to allow identity wallets to interact with UniCore and follow standard protocol flows. These endpoints have the **`(public)`** tag.

    > [!NOTE]
    > Endpoints that should not sit behind some form of authentication are grouped under the `(public)` tag.

    ```json
    {
      "foo": "bar"
    }
    ```

    ## Authentication & Authorization

    UniCore does not have any user management or authentication built-in (yet). It does not know of any roles or scopes. It is expected that the application which calls UniCore only performs calls which have been checked in the consumer business logic. If you want to deploy UniCore publicly, you should restrict access to the API by running it behind a reverse proxy or some API gateway. In most cases, only the endpoints behind `/v0` need to be protected, but all other endpoints should stay publicly accessible.

    ### Example reverse proxy configuration

    Here is an example Nginx configuration that restricts access to the `/v0` endpoints by checking for a valid API key in the headers:

    <details>
      <summary>nginx.conf</summary>

    ```
    http {
        server {
            listen 8080;
            gzip on;

            location /v0 {
                if ($http_x_api_key != "A041FE585C6F45CF841D20D47D329FA5") {
                    return 403;
                }

                proxy_pass http://127.0.0.1:3033/v0;
            }

            location / {
                proxy_pass http://127.0.0.1:3033;
            }
        }
    }
    ```

    </details>
  license:
    name: ''
  version: ''
paths:
  /.well-known/did-configuration.json:
    get:
      tags:
      - (.well-known)
      - (public)
      summary: DID Configuration Resource for Domain Linkage
      description: Standard .well-known endpoint for DID Configuration Resources.
      operationId: did_configuration_json
      responses:
        '200':
          description: DID Configuration Resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainLinkageConfiguration'
        '404':
          description: Domain Linkage inactive.
  /.well-known/did.json:
    get:
      tags:
      - (.well-known)
      - (public)
      summary: DID Document for `did:web` method
      description: Standard .well-known endpoint for self-hosted DID Document.
      operationId: did_json
      responses:
        '200':
          description: DID Document for `did:web` method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoreDocument'
        '404':
          description: DID method `did:web` inactive.
  /.well-known/oauth-authorization-server:
    get:
      tags:
      - (.well-known)
      - (public)
      summary: Authorization Server Metadata
      description: Standard OpenID Connect discovery endpoint for authorization metadata.
      operationId: oauth_authorization_server
      responses:
        '200':
          description: Successfully returns the Authorization Server Metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServerMetadata'
  /.well-known/openid-credential-issuer:
    get:
      tags:
      - (.well-known)
      - (public)
      summary: Credential Issuer Metadata
      description: Standard OpenID Connect discovery endpoint for issuer metadata.
      operationId: openid_credential_issuer
      responses:
        '200':
          description: Successfully returns the Credential Issuer Metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialIssuerMetadata'
  /auth/token:
    post:
      tags:
      - (public)
      summary: Token Endpoint
      description: Standard OAuth 2.0 endpoint that returns an access_token after successful authorization.
      operationId: token
      requestBody:
        description: ''
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
        required: true
      responses:
        '200':
          description: Returns an access token.
  /openid4vci/credential:
    post:
      tags:
      - Issuance
      - (public)
      summary: Credential Endpoint
      description: Standard OpenID4VCI endpoint for redeeming a token for a credential.
      operationId: credential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
        required: true
      responses:
        '200':
          description: Successfully returns the credential
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialResponse'
  /openid4vci/offers:
    get:
      tags:
      - Holder
      - (public)
      summary: Credential Offer Endpoint
      description: |-
        Standard OpenID4VCI endpoint that allows the Issuer to pass information about the credential offer to the Holder's wallet.

        [Specification](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-credential-offer-endpoint)
      operationId: offers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Oid4vciOfferEndpointRequest'
        required: true
      responses:
        '200':
          description: Successfully received offer metadata.
  /redirect:
    post:
      tags:
      - (public)
      summary: Redirect Endpoint
      description: Standard OAuth 2.0 endpoint.
      operationId: redirect
      requestBody:
        description: ''
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GenericAuthorizationResponse'
        required: true
      responses:
        '200':
          description: ''
  /request/{id}:
    get:
      tags:
      - (public)
      summary: Authorization Request
      description: |-
        Standard OAuth 2.0 endpoint.

        Instead of directly embedding the Authorization Request into a QR-code or deeplink, the `Relying Party` can embed a
        `request_uri` that points to this endpoint from where the Authorization Request Object can be retrieved.
        As described here: https://www.rfc-editor.org/rfc/rfc9101.html#name-passing-a-request-object-by-
      operationId: request
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
  /v0/authorization_requests:
    post:
      tags:
      - Verification
      summary: Create a new Authorization Request
      description: UniCore will ask a holder for certain information based on the Presentation Definition specified.
      operationId: authorization_requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequestsEndpointRequest'
        required: true
      responses:
        '201':
          description: Authorization Request successfully created.
  /v0/authorization_requests/{id}:
    get:
      tags:
      - Verification
      summary: Get an Authorization Request
      description: Retrieve an existing Authorization Request.
      operationId: get_authorization_requests
      parameters:
      - name: id
        in: path
        description: The ID of the Authorization Request to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully returns an existing Authorization Request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericAuthorizationRequest'
  /v0/credentials:
    post:
      tags:
      - Issuance
      summary: Create a new credential
      description: Create a new credential for a given subject.
      operationId: credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsEndpointRequest'
            examples:
              openbadges:
                summary: Open Badges 3.0
                description: s0me descr1pti0n
                externalValue: res/open-badge-request.json
              w3c-vc:
                summary: W3C v1.1
                description: s0me descr1pti0n
                value:
                  offerId: '123'
                  credentialConfigurationId: w3c_vc_credential
                  credential:
                    credentialSubject:
                      first_name: Ferris
                      last_name: Rustacean
        required: true
      responses:
        '201':
          description: Successfully created a new credential.
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialView'
              examples:
                openbadges-3-0:
                  summary: Open Badges 3.0
                  description: An badge following the Open Badges Specification 3.0
                  value:
                    foo: bar
                w3c-vc-1-1:
                  summary: W3C VC Data Model v1.1
                  description: A credential following the W3C Verifiable Credentials Data Model v1.1
                  value:
                    offerId: '0001'
        '400':
          description: Invalid payload.
  /v0/credentials/{id}:
    get:
      tags:
      - Issuance
      summary: Retrieve a credential
      description: Retrieves an existing credential by its ID.
      operationId: get_credentials
      parameters:
      - name: id
        in: path
        description: Unique identifier of the Credential
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: Credential found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialView'
  /v0/holder/credentials:
    get:
      tags:
      - Holder
      summary: Get all credentials
      description: Retrieve all credentials that this UniCore instance currently holds.
      operationId: credentials
      responses:
        '200':
          description: Successfully retrieved all credentials.
  /v0/holder/offers:
    get:
      tags:
      - Holder
      summary: Get all offers
      description: Retrieve all pending credential offers.
      operationId: offers
      responses:
        '200':
          description: Successfully retrieved all pending offers.
  /v0/holder/offers/{offer_id}/accept:
    post:
      tags:
      - Holder
      summary: Accept an offer
      description: Accept a pending credential offer. UniCore will then make a request to the Issuer to receive the offer.
      operationId: accept
      parameters:
      - name: offer_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully accepted a pending offer.
  /v0/holder/offers/{offer_id}/reject:
    post:
      tags:
      - Holder
      summary: Reject an offer
      description: Reject a pending credential offer. UniCore will not make any further requests to the Issuer.
      operationId: reject
      parameters:
      - name: offer_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully rejected a pending offer.
  /v0/offers:
    post:
      tags:
      - Issuance
      summary: Create a new credential offer
      description: Create a new offer for one or more credentials.
      operationId: offers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OffersEndpointRequest'
        required: true
      responses:
        '200':
          description: Successfully created a new credential offer. Response value is standard-compliant and can be used by identity wallet.
          content:
            application/x-www-form-urlencoded:
              schema:
                type: string
              example: openid-credential-offer://?credential_offer=%7B%22credential_issuer%22%3A%22https%3A%2F%2Fcredential-issuer.example.com%2F%22%2C%22credentials%22%3A%5B%7B%22format%22%3A%22ldp_vc%22%2C%22credential_definition%22%3A%7B%22%40context%22%3A%5B%22https%3A%2F%2Fwww.w3.org%2F2018%2Fcredentials%2Fv1%22%2C%22https%3A%2F%2Fwww.w3.org%2F2018%2Fcredentials%2Fexamples%2Fv1%22%5D%2C%22type%22%3A%5B%22VerifiableCredential%22%2C%22UniversityDegreeCredential%22%5D%7D%7D%5D%7D
  /v0/offers/send:
    post:
      tags:
      - Issuance
      summary: Send offer to Holder
      description: |-
        Manually send a prepared credential offer to a Holder's [Credential Offer Endpoint](#tag/holder/GET/openid4vci/offers) via a `GET` request.
        This is **not** required if the wallet initiates the flow (usually an end-user mobile wallet), but rather when the Holder that has no prior knowledge of the offer (most often another cloud-based wallet, such as another UniCore instance).
      operationId: send
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendOfferEndpointRequest'
            example:
              offerId: '0001'
              targetUrl: https://wallet.example.com/openid4vci/offers
        required: true
      responses:
        '200':
          description: Successfully sent credential offer to Holder.
        '400':
          description: Invalid payload.
components:
  schemas:
    AuthorizationRequestsEndpointRequest:
      allOf:
      - allOf:
        - type: 'null'
        - $ref: '#/components/schemas/PresentationDefinitionResource'
      - type: object
        required:
        - nonce
        properties:
          nonce:
            type: string
          state:
            type:
            - string
            - 'null'
    CredentialsEndpointRequest:
      type: object
      required:
      - offerId
      - credential
      - credentialConfigurationId
      properties:
        credential: {}
        credentialConfigurationId:
          type: string
        isSigned:
          type: boolean
        offerId:
          type: string
    OffersEndpointRequest:
      type: object
      required:
      - offerId
      properties:
        offerId:
          type: string
    Oid4vciOfferEndpointRequest:
      allOf:
      - $ref: '#/components/schemas/CredentialOffer'
      - type: object
    SendOfferEndpointRequest:
      type: object
      required:
      - offerId
      - targetUrl
      properties:
        offerId:
          type: string
        targetUrl:
          $ref: '#/components/schemas/Url'
tags:
- name: (public)
  description: A collection of endpoints that should be publicly accessible without authentication. They are used to resolve metadata or allow communication with wallets.
- name: (.well-known)
  description: Well-known endpoints provide metadata about the server.
- name: Issuance
  description: Issue credentials to holders that will store them in their wallets.
  externalDocs:
    url: https://docs.impierce.com
    description: Issuance API Documentation
externalDocs:
  url: https://docs.impierce.com
  description: Official Documentation
